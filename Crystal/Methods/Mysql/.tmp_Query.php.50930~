<?php
/**
 * Crystal DBAL
 *
 * An open source application for database manipulation
 *
 * @package		Crystal DBAL
 * @author		Martin Rusev
 * @link		http://crystal.martinrusev.net
 * @since		Version 0.1
 * @version     0.1
 */

// ------------------------------------------------------------------------
class Crystal_Methods_Mysql_Query 
{
   private $get;
   private $where;
   private $order;
   private $limit;
   private $columns;
   private $query;
   public $db;
   private $print_query;


    function  __construct()
    {

        $this->conn = new Crystal_Connection_Manager();

    }

    function  __call($name,  $arguments)
    {
        
        $method = "Crystal_Methods_Mysql_" . $name;

        if(new $method($arguments) == FALSE)
        {
            throw new Crystal_Methods_Mysql_Exception('Invalid method:' . $name);
        }
        else
        {
            $this->sql = new $method($arguments);
        }


     print_r($this->sql);
        
    }


    
    public function get($table){

      
       $this->get = "SELECT * FROM " . $this->add_apostrophe($table);

       return $this;

    }


    function columns($columns=null){

         if(isset($columns))
         {
             /** SELECTS LAST ELEMENT FROM $columns **/
             end($columns);
            $last_element = current($columns);

            foreach($columns as $value)
            {
                    if($value != $last_element)
                    {
                        $this->columns .= $this->add_apostrophe($value) . ',';
                    }
                    else
                    {
                        $this->columns .= $this->add_apostrophe($value);
                    }

            }
             return $this;
         }
         else
         {
             return FALSE;
         }



    }



    function where($where=null){

	foreach($where as $key => $value)
	{
            $first_element = key($where);

            if($key == $first_element)
            {
		$this->where .= " WHERE " . $this->add_apostrophe($key) . " = "  . $this->add_single_quote($value);
            }
            else
            {
		$this->where .= " AND " . $this->add_apostrophe($key) . " = "  . $this->add_single_quote($value);
            }

	}

	return $this;

    }



    function orderby($order=null){

        if(isset($order))
	{

            $last_element = end($order);

	    $this->order = "ORDER BY ";


	    foreach($order as $key => $value)
	    {
                if($key == $last_element)
	        {
	             $this->order  .= $key . ' ' .  $value . ' ,';
                }
                else
                {
                    $this->order  .= $this->add_apostrophe($key) . $value;
                }

            }

            return $this;
        }
        else
        {

            return FALSE;

        }


    }


    function limit($offset=null, $limit=null){

        if(isset($offset) && isset($limit))
        {
            $this->limit = " LIMIT " . $offset . ',' . $limit;

            return $this;

        }
        else
        {
            return FALSE;
        }


    }



    function _generate_select_sql(){

        $this->get;
        $this->columns;

        if(isset($this->columns))
        {
           $this->sql = str_replace('*', $this->columns, $this->get);
        }
        else
        {
            $this->sql .= $this->get;
        }

     	$this->sql .= $this->where;
	$this->sql .= $this->order;
        $this->sql .= $this->limit;


	return $this->sql;

    }


    function print_query()
    {

        if($this->sql == FALSE)
        {
            
            throw new Crystal_Methods_Mysql_Exception("No valid sql to print");
        }
        else
        {
             $this->print_query =  print_r('</br>'. $this->sql);

            return $this->print_query;
        }

       


    }


    function _execute_select_query(){


        $this->query = mysql_query($this->_generate_select_sql());

	if (!$this->query)
	{
            throw new Crystal_Methods_Mysql_Exception("Mysql Error:" . mysql_error());
            return;
        }

        if(mysql_num_rows($this->query) > 0)
        {

            return $this->query;

	}
	else
	{

            return FALSE;
	}


    }


    function _execute_query(){

        $this->query = mysql_query($this->sql, $this->conn);


        if (!$this->query)
	{
            throw new Crystal_Methods_Mysql_Exception("Mysql Error:" . mysql_error());
            return;
	}


    }



    function fetch_array(){

        $this->_execute_select_query();

	 while($row = mysql_fetch_assoc($this->query))
         {
             $result[] = $row;
         }


         return $result;

    }


    function fetch_row(){

        $this->_execute_select_query();

        return mysql_fetch_assoc($this->query);
    }


    function fetch_element(){


       $this->_execute_select_query();

       /** CHECKS FOR MULTIPLE COLUMNS **/
       $find_comma = strpos($this->columns, ',');


       if($find_comma == FALSE)
       {


          $query = mysql_fetch_assoc($this->query);
          $clear_column = trim(str_replace('`', '', $this->columns));

          return $query[$clear_column];

        }
        else
        {
           throw new Crystal_Methods_Mysql_Exception("<b>fetch_element()</b> works only with one parameter in <b>columns()</b>");
           exit;
        }


    }




    /** DELETE METHODS -- BEGIN **/
    function delete($table){

        $this->sql = "DELETE FROM " . $table;

        if(isset($this->where))
        {

            $this->sql .= $this->where;

        }

         $this->_execute_query();


    }


    /** DELETE METHODS -- END **/




    /** UPDATE METHODS -- BEGIN **/
    function update($table, $data=null){

        $this->sql = "UPDATE " . $table . " SET ";



        if(isset($data))
        {

            $this->sql .= $this->escape_update_values($data);

        }


        if(isset($this->where))
        {

            $this->sql .= $this->where;

        }


          $this->_execute_query();


    }


    /** UPDATE METHODS -- END **/


    /** INSERT METHODS -- BEGIN **/
	function insert($table, $data){

        $columns_temp = array_keys($data);
	foreach($columns_temp as $value){$columns[] = $this->add_apostrophe($value);}


        $values_temp = array_values($data);
	foreach($values_temp as $value){$values[] = $this->add_single_quote($value);}



        $this->sql = "INSERT INTO " . $table;
        $this->sql .= '(' . implode(', ' , $columns) . ')';
        $this->sql .= " VALUES ";
        $this->sql .= '(' . implode(', ' , $values) . ')';


	$this->_execute_query();


	return $this;


    }
    /** INSERT METHODS - END ***/


    function escape_update_values($cols){

	foreach($cols as $key => $value)
        {

            $updated_cols[] = $key  . "=" . $this->add_single_quote($value);


        }

        $temp = implode(',', $updated_cols);


	return $temp;

    }


    function count_all($table){

        $this->sql = "SELECT COUNT(*) as total FROM" . $this->add_apostrophe($table);


        $this->_execute_query();

       $result = mysql_fetch_assoc($this->query);

       return $result['total'];


    }

    function count($table){

       $this->sql = "SELECT COUNT(*) as total FROM" . $this->add_apostrophe($table);
       $this->sql .= $this->where;



       $this->_execute_query();

       $result = mysql_fetch_assoc($this->query);

       return $result['total'];



    }


    function add_apostrophe($string){

        return ' `' . mysql_real_escape_string($string) . '` ';
    }


    function add_single_quote($string){

        return " '" . mysql_real_escape_string($string) . "' ";
    }


    function last_insert_id(){

     return mysql_insert_id();

    }


    function affected_rows(){

        return mysql_affected_rows();
    }




}

//print_r($_SERVER);

//$test = new Test();



//	$result = $test->get('new_table')
//    ->columns(array('content'))
//	->where(array('language_id' => '1'))
//    ->orderby(array('table_id' => 'ASC'))
//    ->limit('0', '1')
//	->fetch_element();
//
//    print_r($result);




//    $data = array('title' => 'Updated title',
//                   'content' => "Lorem ipsumdfdf updated");


    // $update = $test->where(array('table_id'=> '6'))
    // ->update('new_table', $data);

    //$query = $test->where(array('language_id'=> '1'))
   // ->count('new_table');

    // print_r($query);



    //$insert = $test->insert('new_table', $data);


   //$test->print_query($query);
    //print_r($test->affected_rows());


