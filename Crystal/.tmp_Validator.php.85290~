<?php
/**
 * Crystal DBAL
 *
 * An open source application for database manipulation
 *
 * @package		Crystal DBAL
 * @author		Martin Rusev
 * @link		http://crystal.martinrusev.net
 * @since		Version 0.1
 * @version     0.1
 */

// ------------------------------------------------------------------------

//include(CRYSTAL_BASEPATH . 'Error' . CRYSTAL_DS . 'Generator.php');
//include(CRYSTAL_BASE . CRYSTAL_DS .  'libs/is_email.php');

class Crystal_Validator
{

    public $passed;
    
    public $errors = array();


    private $valid_methods = array('alpha' => 'Alpha',
                                   'alpha_numeric' => 'AlphaNumeric',
                                   'between' => 'Between',
                                   'boolean' => 'Boolean',
                                   'comparsion' => 'Comparsion',
                                   'valid_email' => 'Email',
                                   'extension' => 'Extension',
                                   'integer' => 'Integer',
                                   'valid_ip' => 'Ip',
                                   'matches' => 'Matches',
                                   'max_length' => 'MaxLength',
                                   'min_length' => 'MinLength',
                                   'numeric' => 'Numeric',
                                   'regexp' => 'Regexp',
                                   'unique' => 'Unique',
                                   'valid_url' => 'Url');

    function __construct($rules ,$data)
    {

        $this->errors = array();
        $this->passed = TRUE;


        /**
         *  CHECK EVERY RULE IN $rules array and checks the conditions
         */
        foreach($rules as $rule => $condition)
        {	
		
			if(array_key_exists($rule, $data))
			{



                print_r($rule);
               
                print_r($condition);
                /*
				$validation_function = $value['rule'];
				
				if(is_array($validation_function))
	            {
	                $params = array_slice($validation_function, 1);
	              
	
	               $validation_result = $this->$validation_function[0]($data[$key], $params);
	
	            }
	            elseif(is_string($validation_function))
	            {
	
	                $validation_result = $this->$validation_function($data[$key]);
	                 
	            }
	            else
	            {
	                print('Invalid key Rule');
	            }
                */
			
			}
		
			
          	/** GEST FIELD RULES **/
//             if($validation_result != TRUE)
//             {
//
//                    if(isset($rules[$key]['message']))
//                    {
//                       $this->errors[$key] = $rules[$key]['message'];
//                    }
//                    else
//                    {
//
//                        $this->errors[$key] = Crystal_Error_Generator::get_validation_error($validation_function,$key);
//
//                    }
//
//                   $this->passed = FALSE;
//              }

            
        }
        
           

      
        
    }


 

   
    
   
    private function _check_method($method)
    {

        
    }


    private function _load_method($method)
    {

        
    }




    
}


